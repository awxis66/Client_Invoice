@page "/employees"
@rendermode InteractiveServer
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repositories
@using System.Globalization
@using Client_Invoice_System.Repository
@inject EmployeeRepository EmployeeRepository
@inject NavigationManager Navigation
@using Client_Invoice_System.Components.Shared

<Breadcrumb />

<div class="container mt-4">
    <!-- 🔍 Search & ➕ Add Employee Section -->
    <div class="row align-items-center">
        <div class="col-md-6">
            <div class="input-group shadow rounded" style="max-width: 300px;">
                <input type="text" class="form-control form-control-sm border-primary rounded-start" placeholder="🔍 Search..." @bind="searchQuery" @oninput="FilterEmployees">
                <button class="btn btn-primary fw-bold px-3" @onclick="FilterEmployees">🔍</button>
            </div>
        </div>
        <div class="col-md-6 text-end">
            <button class="btn btn-primary fw-bold px-4 py-2 shadow-lg rounded" @onclick="NavigateToAddEmployee">➕ Add Employee</button>
        </div>
    </div>

    <!-- 🚀 Employees Table -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card p-3 shadow-lg rounded bg-light">
                <div class="table-responsive">
                    <table class="table table-hover border rounded shadow-sm">
                        <thead style="color: black; font-weight: bold;">
                            <tr>
                                <th class="p-3">Name</th>
                                <th class="p-3">Designation</th>
                                <th class="p-3">Hourly Rate</th>
                                <th class="p-3">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="table-light">
                            @if (pagedEmployees.Any())
                            {
                                @foreach (var employee in pagedEmployees)
                                {
                                    <tr class="align-middle">
                                        <td>@employee.EmployeeName</td>
                                        <td>@employee.Designation</td>
                                        <td>@employee.HourlyRate.ToString("C", new CultureInfo("en-US"))</td>
                                        <td>
                                            <button class="btn btn-sm btn-warning text-dark fw-bold me-2 shadow-sm" @onclick="() => NavigateToEditEmployee(employee.EmployeeId)">✏️ Edit</button>
                                            <button class="btn btn-sm btn-danger fw-bold shadow-sm" @onclick="() => ShowDeleteModal(employee.EmployeeId, employee.EmployeeName)">🗑 Delete</button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="4" class="text-center text-muted">No employees found</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- 📌 Pagination -->
                <nav aria-label="Employee pagination" class="mt-3">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(CanGoPrevious ? "" : "disabled")">
                            <a class="page-link shadow-sm" href="javascript:void(0);" @onclick="PreviousPage">«</a>
                        </li>

                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link fw-bold shadow-sm" href="javascript:void(0);" @onclick="() => GoToPage(i)">@i</a>
                            </li>
                        }

                        <li class="page-item @(CanGoNext ? "" : "disabled")">
                            <a class="page-link shadow-sm" href="javascript:void(0);" @onclick="NextPage">»</a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- 🗑 Delete Confirmation Modal -->
@if (isDeleteModalVisible)
{
    <div class="modal show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="btn-close" @onclick="() => isDeleteModalVisible = false"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete <strong>@employeeToDeleteName</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => isDeleteModalVisible = false">Cancel</button>
                    <button class="btn btn-danger" @onclick="DeleteEmployee">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Employee> employees = new();
    private List<Employee> filteredEmployees = new();
    private List<Employee> pagedEmployees = new();
    private bool isDeleteModalVisible = false;
    private int employeeToDeleteId;
    private string employeeToDeleteName;
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalEmployees;
    private int totalPages => (int)Math.Ceiling((double)totalEmployees / pageSize);
    private bool CanGoPrevious => currentPage > 1;
    private bool CanGoNext => currentPage < totalPages;
    private string searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            employees = (await EmployeeRepository.GetAllAsync()).ToList();
            filteredEmployees = new List<Employee>(employees);
            totalEmployees = employees.Count;
            LoadPagedEmployees();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading employees: {ex.Message}");
        }
    }

    private void LoadPagedEmployees()
    {
        pagedEmployees = filteredEmployees.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void FilterEmployees()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredEmployees = new List<Employee>(employees);
        }
        else
        {
            filteredEmployees = employees
                .Where(e => e.EmployeeName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                            (e.Designation != null && e.Designation.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
                .ToList();
        }

        totalEmployees = filteredEmployees.Count;
        currentPage = 1;
        LoadPagedEmployees();
    }

    private async Task DeleteEmployee()
    {
        if (employeeToDeleteId > 0)
        {
            try
            {
                await EmployeeRepository.DeleteAsync(employeeToDeleteId);
                employees.RemoveAll(e => e.EmployeeId == employeeToDeleteId);
                FilterEmployees();
                isDeleteModalVisible = false;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting employee: {ex.Message}");
            }
        }
    }

    private void NextPage() { if (CanGoNext) { currentPage++; LoadPagedEmployees(); } }
    private void PreviousPage() { if (CanGoPrevious) { currentPage--; LoadPagedEmployees(); } }
    private void GoToPage(int page) { if (page >= 1 && page <= totalPages) { currentPage = page; LoadPagedEmployees(); } }
    private void NavigateToAddEmployee() => Navigation.NavigateTo("/add-edit-employee");
    private void NavigateToEditEmployee(int id) => Navigation.NavigateTo($"/add-edit-employee/{id}");
    private void ShowDeleteModal(int id, string name) { employeeToDeleteId = id; employeeToDeleteName = name; isDeleteModalVisible = true; }
}
