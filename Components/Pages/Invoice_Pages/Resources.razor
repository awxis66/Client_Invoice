@page "/resources"
@rendermode InteractiveServer
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repository
@inject NavigationManager Navigation
@inject ResourceRepository ResourceRepository
@inject EmployeeRepository EmployeeRepository
@inject ClientRepository ClientRepository
@using Client_Invoice_System.Components.Shared

<Breadcrumb />

<!-- 🔍 Search & ➕ Add Resource Section -->
<div class="container mt-4">
    <div class="row align-items-center">
        <div class="col-md-6">
            <div class="input-group shadow rounded" style="max-width: 300px;">
                <input type="text" class="form-control form-control-sm border-primary rounded-start" placeholder="🔍 Search..." @bind="searchQuery" @oninput="FilterResources">
                <button class="btn btn-primary fw-bold px-3" @onclick="FilterResources">🔍</button>
            </div>
        </div>
        <div class="col-md-6 text-end">
            <button class="btn btn-primary fw-bold px-4 py-2 shadow-lg rounded" @onclick="NavigateToAddResource">➕ Add Contract</button>
        </div>
    </div>

    <!-- 🚀 Resources Table -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card p-3 shadow-lg rounded bg-light">
                <div class="table-responsive">
                    <table class="table table-hover border rounded shadow-sm">
                        <thead style="color: black; font-weight: bold;">
                            <tr>
                                <th>Client</th>
                                <th>Resource Name</th>
                                <th>Employee</th>
                                <th>Consumed Hours</th>
                                <th>Contract Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody class="table-light">
                            @if (pagedResources.Any())
                            {
                                @foreach (var resource in pagedResources)
                                {
                                    var statusClass = resource.IsActive ? "text-success fw-bold" : "text-danger fw-bold";
                                    <tr>
                                        <td>@(resource.Client?.Name ?? "Unknown")</td>
                                        <td>@resource.ResourceName</td>
                                        <td>@(resource.Employee?.EmployeeName ?? "Unknown")</td>
                                        <td>@resource.ConsumedTotalHours</td>
                                        <td class="@statusClass">@(resource.IsActive ? "Active" : "Ended")</td>
                                        <td>
                                            <button class="btn btn-warning btn-sm" @onclick="() => NavigateToEditResource(resource.ResourceId)">✏️ Edit</button>
                                            <button class="btn btn-danger btn-sm" @onclick="() => ShowDeleteModal(resource.ResourceId, resource.ResourceName)">🗑 Delete</button>
                                            <button class="btn btn-info btn-sm" @onclick="() => ToggleContractStatus(resource)">@(resource.IsActive ? "End Contract" : "Activate")</button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6" class="text-center text-muted">No resources found</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- 📌 Pagination -->
                <nav aria-label="Resource pagination" class="mt-3">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(CanGoPrevious ? "" : "disabled")">
                            <a class="page-link shadow-sm" href="javascript:void(0);" @onclick="PreviousPage">«</a>
                        </li>
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link fw-bold shadow-sm" href="javascript:void(0);" @onclick="() => GoToPage(i)">@i</a>
                            </li>
                        }
                        <li class="page-item @(CanGoNext ? "" : "disabled")">
                            <a class="page-link shadow-sm" href="javascript:void(0);" @onclick="NextPage">»</a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- 🗑 Delete Confirmation Modal -->
@if (isDeleteModalVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete <strong>@resourceToDeleteName</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Resource> resources = new();
    private List<Resource> filteredResources = new();
    private List<Resource> pagedResources = new();
    private bool isDeleteModalVisible = false;
    private int resourceToDelete;
    private string resourceToDeleteName;
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalResources;
    private int totalPages => (int)Math.Ceiling((double)totalResources / pageSize);
    private bool CanGoPrevious => currentPage > 1;
    private bool CanGoNext => currentPage < totalPages;
    private string searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadResources();
    }

    private async Task LoadResources()
    {
        resources = (await ResourceRepository.GetAllAsync()).ToList();
        filteredResources = new List<Resource>(resources);
        totalResources = resources.Count;
        LoadPagedResources();
    }

    private void LoadPagedResources()
    {
        pagedResources = filteredResources.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void FilterResources()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredResources = new List<Resource>(resources);
        }
        else
        {
            filteredResources = resources
                .Where(r => r.ResourceName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                            (r.Client?.Name?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                            (r.Employee?.EmployeeName?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false))
                .ToList();
        }
        totalResources = filteredResources.Count;
        currentPage = 1;
        LoadPagedResources();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            currentPage++;
            LoadPagedResources();
        }
    }

    private void PreviousPage()
    {
        if (CanGoPrevious)
        {
            currentPage--;
            LoadPagedResources();
        }
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            LoadPagedResources();
        }
    }

    private void NavigateToAddResource() => Navigation.NavigateTo("/add-edit-resource");

    private void NavigateToEditResource(int resourceId) => Navigation.NavigateTo($"/add-edit-resource/{resourceId}");

    private void ShowDeleteModal(int resourceId, string name)
    {
        resourceToDelete = resourceId;
        resourceToDeleteName = name;
        isDeleteModalVisible = true;
    }

    private void CancelDelete() => isDeleteModalVisible = false;

    private async Task ConfirmDelete()
    {
        await ResourceRepository.DeleteAsync(resourceToDelete);
        await LoadResources();
        isDeleteModalVisible = false;
    }

    private async Task ToggleContractStatus(Resource resource)
    {
        resource.IsActive = !resource.IsActive;
        await ResourceRepository.UpdateAsync(resource);
        await LoadResources();
    }
}
