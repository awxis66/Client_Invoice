@page "/clients"
@rendermode InteractiveServer
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repositories
@inject ClientRepository ClientRepo
@inject NavigationManager Navigation
@using Client_Invoice_System.Components.Shared
@using Client_Invoice_System.Repository

<Breadcrumb />

<div class="container mt-4">
    <!-- 🔍 Search & ➕ Add Client Section -->
    <div class="row align-items-center">
        <div class="col-md-6">
            <div class="input-group shadow rounded" style="max-width: 300px;">
                <input type="text" class="form-control form-control-sm border-primary rounded-start" placeholder="🔍 Search..." @bind="searchQuery" @oninput="FilterClients">
                <button class="btn btn-primary fw-bold px-3" @onclick="FilterClients">🔍</button>
            </div>
        </div>
        <div class="col-md-6 text-end">
            <button class="btn btn-primary fw-bold px-4 py-2 shadow-lg rounded" @onclick="AddClient">➕ Add Client</button>
        </div>
    </div>

    <!-- 🚀 Clients Table -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card p-3 shadow-lg rounded bg-light">
                <div class="table-responsive">
                    <table class="table table-hover border rounded shadow-sm">
                        <!-- ✨ Table Header with Custom Styling -->
                        <thead style="color: black; font-weight: bold;">
                            <tr>
                                <th class="p-3">Name</th>
                                <th class="p-3">Email</th>
                                <th class="p-3">Address</th>
                                <th class="p-3">Phone Number</th>
                                <th class="p-3">Country</th>
                                <th class="p-3">Currency</th>
                                <th class="p-3">Client ID</th>
                                <th class="p-3">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="table-light">
                            @if (pagedClients.Any())
                            {
                                @foreach (var client in pagedClients)
                                {
                                    <tr class="align-middle">
                                        <td>@client.Name</td>
                                        <td>@client.Email</td>
                                        <td>@client.Address</td>
                                        <td>@client.PhoneNumber</td>
                                        <td>@(client.CountryCurrency?.CountryName ?? "N/A")</td>
                                        <td>
                                            @(client.CustomCurrency?.Trim() != ""
                                                ? client.CustomCurrency
                                                : client.CountryCurrency?.CurrencyName ?? "N/A")
                                            (@(client.CountryCurrency?.CurrencyCode ?? "-") - @(client.CountryCurrency?.Symbol ?? "-"))
                                        </td>
                                        <td>@client.ClientIdentifier</td>
                                        <td>
                                            <button class="btn btn-sm btn-warning text-dark fw-bold me-2 shadow-sm" @onclick="() => EditClient(client.ClientId)">✏️ Edit</button>
                                            <button class="btn btn-sm btn-danger fw-bold shadow-sm" @onclick="() => ShowDeleteModal(client.ClientId, client.Name)">🗑 Delete</button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="8" class="text-center text-muted">No clients found</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- 📌 Pagination -->
                <nav aria-label="Client pagination" class="mt-3">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(CanGoPrevious ? "" : "disabled")">
                            <a class="page-link shadow-sm" href="javascript:void(0);" @onclick="PreviousPage">«</a>
                        </li>

                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link fw-bold shadow-sm" href="javascript:void(0);" @onclick="() => GoToPage(i)">@i</a>
                            </li>
                        }

                        <li class="page-item @(CanGoNext ? "" : "disabled")">
                            <a class="page-link shadow-sm" href="javascript:void(0);" @onclick="NextPage">»</a>
                        </li>
                    </ul>
                </nav>

            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (isDeleteModalVisible)
{
    <div class="modal-overlay">
        <div class="delete-modal">
            <p class="fw-bold">Are you sure you want to delete <span class="text-danger">@clientToDeleteName</span>?</p>
            <div class="d-flex justify-content-center gap-3">
                <button class="btn btn-danger" @onclick="ConfirmDelete">Yes, Delete</button>
                <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
            </div>
        </div>
    </div>
}

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background: rgba(0, 0, 0, 0.4);
        z-index: 1050;
    }

    .delete-modal {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 400px;
    }
</style>

@code {
    private List<Client> clients = new();
    private List<Client> filteredClients = new();
    private List<Client> pagedClients = new();
    private bool isDeleteModalVisible = false;
    private int clientToDeleteId;
    private string clientToDeleteName;
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalClients;
    private int totalPages => (int)Math.Ceiling((double)totalClients / pageSize);
    private bool CanGoPrevious => currentPage > 1;
    private bool CanGoNext => currentPage < totalPages;
    private string searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            clients = (await ClientRepo.GetAllAsync(true)).ToList();
            filteredClients = new List<Client>(clients);
            totalClients = clients.Count;
            LoadPagedClients();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading clients: {ex.Message}");
        }
    }

    private void LoadPagedClients()
    {
        pagedClients = filteredClients.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void FilterClients()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredClients = new List<Client>(clients);
        }
        else
        {
            filteredClients = clients
                .Where(c => c.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                            c.Email.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                            c.Address.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                            c.PhoneNumber.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        totalClients = filteredClients.Count;
        currentPage = 1;
        LoadPagedClients();
    }

    private void NextPage() => ChangePage(currentPage + 1);
    private void PreviousPage() => ChangePage(currentPage - 1);
    private void GoToPage(int page) => ChangePage(page);

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            LoadPagedClients();
        }
    }

    private void AddClient() => Navigation.NavigateTo("/add-client");
    private void EditClient(int id) => Navigation.NavigateTo($"/edit-client/{id}");

    private void ShowDeleteModal(int id, string name)
    {
        clientToDeleteId = id;
        clientToDeleteName = name;
        isDeleteModalVisible = true;
    }

    private async Task ConfirmDelete()
    {
        await ClientRepo.DeleteAsync(clientToDeleteId);
        clients.RemoveAll(c => c.ClientId == clientToDeleteId);
        FilterClients();
        isDeleteModalVisible = false;
    }

    private void CancelDelete() => isDeleteModalVisible = false;
}
