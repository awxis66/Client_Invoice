@page "/owner-profile"
@rendermode InteractiveServer
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repositories
@using Client_Invoice_System.Repository
@inject OwnerRepository OwnerRepository
@inject NavigationManager Navigation
@using Client_Invoice_System.Components.Shared
<Breadcrumb />

<h3 class="text-primary">Owner Profiles</h3>
<div class="d-flex justify-content-end mb-3">
    <button class="btn btn-primary" @onclick="AddOwnerProfile">Add New Owner Profile</button>
</div>

@if (Owners != null && Owners.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Owner Name</th>
                <th>Billing Email</th>
                <th>Phone Number</th>
                <th>Billing Address</th>
                <th>IBAN Number</th>
                <th>Account Number</th>
                <th>Country</th>
                <th>Currency</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var owner in Owners)
            {
                <tr>
                    <td>@owner.OwnerName</td>
                    <td>@owner.BillingEmail</td>
                    <td>@owner.PhoneNumber</td>
                    <td>@owner.BillingAddress</td>
                    <td>@owner.IBANNumber</td>
                    <td>@owner.AccountNumber</td>
                    <td>@(owner.CountryCurrency?.CountryName ?? "N/A")</td>
                    <td>
                        @(owner.CustomCurrency?.Trim() != ""
                            ? owner.CustomCurrency
                            : owner.CountryCurrency?.CurrencyName ?? "N/A")
                        (@(owner.CountryCurrency?.CurrencyCode ?? "-") - @(owner.CountryCurrency?.Symbol ?? "-"))
                    </td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditOwnerProfile(owner.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ShowDeleteModal(owner.Id, owner.OwnerName)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="text-muted text-center">No owner profiles found.</p>
}

<!-- Delete Confirmation Modal -->
@if (isDeleteModalVisible)
{
    <div class="modal-overlay">
        <div class="delete-modal">
            <p class="fw-bold">Are you sure you want to delete <span class="text-danger">@ownerToDeleteName</span>?</p>
            <div class="d-flex justify-content-center gap-3">
                <button class="btn btn-danger" @onclick="ConfirmDelete">Yes, Delete</button>
                <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
            </div>
        </div>
    </div>
}

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background: transparent;
        z-index: 1050;
    }

    .delete-modal {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 400px;
    }
</style>

@code {
    private List<OwnerProfile> Owners = new();
    private bool isDeleteModalVisible = false;
    private int ownerToDelete;
    private string ownerToDeleteName;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Owners = (await OwnerRepository.GetAllOwnerProfilesAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error loading owner profiles: {ex.Message}");
        }
    }

    private void AddOwnerProfile()
    {
        Navigation.NavigateTo("/add-owner-profile");
    }

    private void EditOwnerProfile(int ownerId)
    {
        Navigation.NavigateTo($"/edit-owner-profile/{ownerId}");
    }

    private void ShowDeleteModal(int ownerId, string ownerName)
    {
        ownerToDelete = ownerId;
        ownerToDeleteName = ownerName;
        isDeleteModalVisible = true;
    }

    private void CancelDelete()
    {
        isDeleteModalVisible = false;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            await OwnerRepository.DeleteOwnerProfileAsync(ownerToDelete);
            Owners = (await OwnerRepository.GetAllOwnerProfilesAsync()).ToList(); // Refresh list
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error deleting owner profile: {ex.Message}");
        }
        finally
        {
            isDeleteModalVisible = false;
        }
    }
}
