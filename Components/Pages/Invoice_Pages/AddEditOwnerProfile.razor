@page "/add-owner-profile"
@page "/edit-owner-profile/{OwnerId:int}"
@rendermode InteractiveServer
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repositories
@using Client_Invoice_System.Repository
@inject OwnerRepository OwnerRepository
@inject CountryCurrencyRepository CountryCurrencyRepository
@inject NavigationManager Navigation
@using Client_Invoice_System.Components.Shared
@* <Breadcrumb /> *@

<h3 class="text-primary text-center">@((Owner.Id == 0) ? "Add Owner Profile" : "Edit Owner Profile")</h3>

<EditForm Model="Owner" OnValidSubmit="SaveOwnerProfile">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="d-flex justify-content-center">
    <div class="card shadow p-4" style="max-width: 900px; width: 100%;">
        <div class="row">
            <div class="col-md-6 mb-3">
                <label class="form-label fw-bold">Owner Name</label>
                <input type="text" class="form-control" @bind="Owner.OwnerName" required />
            </div>

                <div class="col-md-6 mb-3">
                <label class="form-label fw-bold">Billing Email</label>
                <input type="email" class="form-control" @bind="Owner.BillingEmail" required />
            </div>

                <div class="col-md-6 mb-3">
                <label class="form-label fw-bold">Phone Number</label>
                <input type="tel" class="form-control" @bind="Owner.PhoneNumber" />
            </div>

                <div class="col-md-6 mb-3">
                <label class="form-label fw-bold">Billing Address</label>
                <textarea class="form-control" @bind="Owner.BillingAddress"></textarea>
            </div>

            <!-- Country & Currency Selection -->
                <div class="col-md-6 mb-3">
                <label class="form-label fw-bold">Country & Currency</label>
                <select class="form-control" @onchange="OnCountryChange">
                    <option value="">Select Country & Currency</option>
                    @foreach (var item in CountryCurrencyList)
                    {
                        <option value="@item.Id" selected="@(item.Id == Owner.CountryCurrencyId)">
                            @($"{item.CountryName} ({item.CurrencyCode} - {item.Symbol})")
                        </option>
                    }
                </select>
            </div>

            <!-- Auto-selected Currency -->
                <div class="col-md-6 mb-3">
                <label class="form-label fw-bold">Default Currency</label>
                <input type="text" class="form-control" value="@SelectedCurrency" readonly />
            </div>

                <div class="col-md-6 mb-3">
                <label class="form-label fw-bold">Custom Currency (Optional)</label>
                <input type="text" class="form-control" @bind="Owner.CustomCurrency" placeholder="Override Default Currency" />
            </div>

                <div class="col-md-6 mb-3">
                <label class="form-label fw-bold">Bank Name</label>
                <input type="text" class="form-control" @bind="Owner.BankName" />
            </div>

                <div class="col-md-6 mb-3">
                <label class="form-label fw-bold">SWIFT Code</label>
                <input type="text" class="form-control" @bind="Owner.Swiftcode" />
            </div>

                <div class="col-md-6 mb-3">
                <label class="form-label fw-bold">Branch Address</label>
                <input type="text" class="form-control" @bind="Owner.BranchAddress" />
            </div>

                <div class="col-md-6 mb-3">
                <label class="form-label fw-bold">Beneficiary Address</label>
                <input type="text" class="form-control" @bind="Owner.BeneficeryAddress" />
            </div>

                <div class="col-md-6 mb-3">
                <label class="form-label fw-bold">IBAN Number</label>
                <input type="text" class="form-control" @bind="Owner.IBANNumber" required />
            </div>

                <div class="col-md-6 mb-3">
                <label class="form-label fw-bold">Account Title</label>
                <input type="text" class="form-control" @bind="Owner.AccountTitle" />
            </div>

                <div class="col-md-6 mb-3">
                <label class="form-label fw-bold">Account Number</label>
                <input type="text" class="form-control" @bind="Owner.AccountNumber" />
            </div>

            <div class="d-flex justify-content-end">
                <button class="btn btn-secondary me-3" @onclick="Cancel">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveOwnerProfile">Save</button>
            </div>

        </div>
    </div>
    </div>
</EditForm>

@code {
    [Parameter] public int? OwnerId { get; set; }
    private OwnerProfile Owner = new();
    private List<CountryCurrency> CountryCurrencyList = new();
    private string SelectedCurrency = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CountryCurrencyList = await CountryCurrencyRepository.GetAllAsync();

            if (OwnerId.HasValue)
            {
                Owner = await OwnerRepository.GetOwnerProfileByIdAsync(OwnerId.Value) ?? new OwnerProfile();
            }

            UpdateSelectedCurrency();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task SaveOwnerProfile()
    {
        if (Owner.Id == 0)
        {
            await OwnerRepository.AddOwnerProfileAsync(Owner);
        }
        else
        {
            await OwnerRepository.UpdateOwnerProfileAsync(Owner);
        }
        Navigation.NavigateTo("/owner-profile");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/owner-profile");
    }

    private void OnCountryChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int selectedId))
        {
            Owner.CountryCurrencyId = selectedId; // Update the bound value manually
            UpdateSelectedCurrency();
        }
    }

    private void UpdateSelectedCurrency()
    {
        var selectedCountry = CountryCurrencyList.FirstOrDefault(c => c.Id == Owner.CountryCurrencyId);
        SelectedCurrency = selectedCountry != null ? $"{selectedCountry.CurrencyName} ({selectedCountry.Symbol})" : "";
    }
}
